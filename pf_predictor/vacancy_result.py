import sys
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import numpy as np
from PyQt5.QtWidgets import (
    QApplication, QWidget, QLabel, QVBoxLayout, QHBoxLayout, 
    QFrame, QScrollArea, QGridLayout, QPushButton, QGroupBox
)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont
import matplotlib
matplotlib.use('Qt5Agg')

# ÌïúÍ∏Ä Ìè∞Ìä∏ ÏÑ§Ï†ï
plt.rcParams['font.family'] = ['Malgun Gothic', 'DejaVu Sans', 'AppleGothic']
plt.rcParams['axes.unicode_minus'] = False


class VacancyResultWindow(QWidget):
    def __init__(self, prediction_data, input_data, project_name):
        super().__init__()
        self.prediction_data = prediction_data
        self.input_data = input_data
        self.project_name = project_name
        
        self.setWindowTitle("üìä Î∂ÄÎèôÏÇ∞ Î∂ÑÏñëÎ•† ÏòàÏ∏° Í≤∞Í≥º")
        self.setMinimumSize(1200, 800)
        self.resize(1400, 900)
        
        self.setStyleSheet("""
            QWidget {
                background-color: #f0f8ff;
                font-family: 'Malgun Gothic', Arial, sans-serif;
            }
        """)
        
        self.init_ui()
        self.center_window()
    
    def init_ui(self):
        # Î©îÏù∏ Î†àÏù¥ÏïÑÏõÉ
        main_layout = QVBoxLayout()
        main_layout.setContentsMargins(25, 25, 25, 25)
        main_layout.setSpacing(20)
        
        # Ìó§Îçî ÏòÅÏó≠
        header = self.create_header()
        main_layout.addWidget(header)
        
        # Ïä§ÌÅ¨Î°§ ÏòÅÏó≠
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setStyleSheet("""
            QScrollArea {
                border: none;
                background-color: transparent;
            }
            QScrollBar:vertical {
                background-color: #f0f0f0;
                width: 12px;
                border-radius: 6px;
                margin: 2px;
            }
            QScrollBar::handle:vertical {
                background-color: #c0c0c0;
                border-radius: 6px;
                min-height: 25px;
                margin: 2px;
            }
            QScrollBar::handle:vertical:hover {
                background-color: #a0a0a0;
            }
        """)
        
        # Ïä§ÌÅ¨Î°§ ÎÇ¥Ïö©
        scroll_content = QWidget()
        content_layout = QVBoxLayout()
        content_layout.setSpacing(20)
        
        # ÏòàÏ∏° Í≤∞Í≥º Ïπ¥Îìú (Î©îÏù∏)
        result_card = self.create_result_card()
        content_layout.addWidget(result_card)
        
        # Ï∞®Ìä∏ ÏòÅÏó≠ (2x2 Í∑∏Î¶¨Îìú)
        charts_layout = QGridLayout()
        charts_layout.setSpacing(15)
        
        # Î∂ÑÏñëÎ•† Í≤åÏù¥ÏßÄ Ï∞®Ìä∏
        gauge_chart = self.create_gauge_chart()
        charts_layout.addWidget(gauge_chart, 0, 0)
        
        # ÏúÑÏπò Ï†êÏàò Ï∞®Ìä∏
        location_chart = self.create_location_chart()
        charts_layout.addWidget(location_chart, 0, 1)
        
        # Ìé∏ÏùòÏãúÏÑ§ Î∂ÑÏÑù Ï∞®Ìä∏
        convenience_chart = self.create_convenience_chart()
        charts_layout.addWidget(convenience_chart, 1, 0)
        
        # Í≤ΩÏ†úÏßÄÌëú Î∂ÑÏÑù Ï∞®Ìä∏
        economic_chart = self.create_economic_chart()
        charts_layout.addWidget(economic_chart, 1, 1)
        
        content_layout.addLayout(charts_layout)
        
        # Í∞ÄÍ≤© ÎπÑÍµê Ï∞®Ìä∏
        price_chart = self.create_price_comparison_chart()
        content_layout.addWidget(price_chart)
        
        # ÏÉÅÏÑ∏ Î∂ÑÏÑù Ïπ¥Îìú
        analysis_card = self.create_analysis_card()
        content_layout.addWidget(analysis_card)
        
        scroll_content.setLayout(content_layout)
        scroll_area.setWidget(scroll_content)
        
        # ÌïòÎã® Î≤ÑÌäº ÏòÅÏó≠
        button_layout = QHBoxLayout()
        
        # Î≤ÑÌäºÎì§
        buttons = [
            ("üìÑ PDFÎ°ú Ï†ÄÏû•", "#34495e", "#2c3e50", None),
            ("üîÑ ÏÉà ÏòàÏ∏°", "#007bff", "#0056b3", self.close),
            ("‚ùå Îã´Í∏∞", "#95a5a6", "#7f8c8d", self.close)
        ]
        
        for text, color, hover_color, func in buttons:
            btn = QPushButton(text)
            btn.setFixedHeight(45)
            btn.setFont(QFont("Malgun Gothic", 11))
            btn.setStyleSheet(f"""
                QPushButton {{
                    background-color: {color};
                    color: white;
                    border: none;
                    border-radius: 22px;
                    padding: 12px 25px;
                    font-weight: bold;
                }}
                QPushButton:hover {{
                    background-color: {hover_color};
                }}
            """)
            if func:
                btn.clicked.connect(func)
            button_layout.addWidget(btn)
            
            if text == "üìÑ PDFÎ°ú Ï†ÄÏû•":
                button_layout.addStretch()
        
        # Î©îÏù∏ Î†àÏù¥ÏïÑÏõÉ Íµ¨ÏÑ±
        main_layout.addWidget(scroll_area, 1)
        main_layout.addLayout(button_layout, 0)
        
        self.setLayout(main_layout)
    
    def create_header(self):
        """Ìó§Îçî ÏòÅÏó≠ ÏÉùÏÑ±"""
        header = QFrame()
        header.setFixedHeight(80)
        header.setStyleSheet("""
            QFrame {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 #007bff, stop:1 #0056b3);
                border-radius: 8px;
                padding: 15px;
            }
        """)
        
        layout = QVBoxLayout()
        layout.setSpacing(8)
        layout.setAlignment(Qt.AlignCenter)
        
        title = QLabel("üìä Î∂ÄÎèôÏÇ∞ Î∂ÑÏñëÎ•† ÏòàÏ∏° Í≤∞Í≥º")
        title.setFont(QFont("Malgun Gothic", 18, QFont.Bold))
        title.setStyleSheet("color: white; margin: 0;")
        title.setAlignment(Qt.AlignCenter)
        
        subtitle = QLabel(f"ÌîÑÎ°úÏ†ùÌä∏: {self.project_name} | "
                         f"ÏòàÏ∏° Î∂ÑÏñëÎ•†: {self.prediction_data['vacancy_rate']:.1f}% | "
                         f"Îì±Í∏â: {self.prediction_data['grade']} | "
                         f"ÏßÄÏó≠: {self.input_data['district']}")
        subtitle.setFont(QFont("Malgun Gothic", 11))
        subtitle.setStyleSheet("color: rgba(255, 255, 255, 0.9); margin: 0;")
        subtitle.setAlignment(Qt.AlignCenter)
        
        layout.addWidget(title)
        layout.addWidget(subtitle)
        header.setLayout(layout)
        
        return header
    
    def create_result_card(self):
        """Î©îÏù∏ ÏòàÏ∏° Í≤∞Í≥º Ïπ¥Îìú"""
        card = QFrame()
        card.setStyleSheet("""
            QFrame {
                background-color: white;
                border-radius: 15px;
                border: 1px solid #b8daff;
                padding: 30px;
            }
        """)
        
        layout = QVBoxLayout()
        layout.setAlignment(Qt.AlignCenter)
        layout.setSpacing(20)
        
        # Í≤∞Í≥º ÌëúÏãú
        vacancy_rate = self.prediction_data['vacancy_rate']
        grade = self.prediction_data['grade']
        status = self.prediction_data['status']
        
        # ÏÉÅÌÉúÏóê Îî∞Î•∏ Ïù¥Î™®ÏßÄÏôÄ ÏÉâÏÉÅ
        if vacancy_rate >= 75:
            status_emoji = "‚úÖ"
            status_color = "#28a745"
        elif vacancy_rate >= 60:
            status_emoji = "‚úÖ"
            status_color = "#28a745"
        elif vacancy_rate >= 45:
            status_emoji = "‚ö†Ô∏è"
            status_color = "#ffc107"
        else:
            status_emoji = "üö®"
            status_color = "#dc3545"
        
        # ÏÉÅÌÉú ÌëúÏãú
        status_label = QLabel(f"{status_emoji} {status}")
        status_label.setFont(QFont("Malgun Gothic", 28, QFont.Bold))
        status_label.setStyleSheet(f"color: {status_color}; margin: 10px 0;")
        status_label.setAlignment(Qt.AlignCenter)
        
        # Î∂ÑÏñëÎ•† ÌëúÏãú
        rate_label = QLabel(f"ÏòàÏÉÅ Î∂ÑÏñëÎ•†: {vacancy_rate:.1f}%")
        rate_label.setFont(QFont("Malgun Gothic", 24, QFont.Bold))
        rate_label.setStyleSheet("color: #2c3e50; margin: 5px 0;")
        rate_label.setAlignment(Qt.AlignCenter)
        
        # Îì±Í∏â ÌëúÏãú
        grade_label = QLabel(f"Îì±Í∏â: {grade}")
        grade_label.setFont(QFont("Malgun Gothic", 16))
        grade_label.setStyleSheet("color: #7f8c8d; margin: 5px 0;")
        grade_label.setAlignment(Qt.AlignCenter)
        
        # Î∂ÑÏñëÎ•† Í≤åÏù¥ÏßÄ
        gauge_frame = self.create_rate_gauge(vacancy_rate)
        
        layout.addWidget(status_label)
        layout.addWidget(rate_label)
        layout.addWidget(grade_label)
        layout.addWidget(gauge_frame)
        
        card.setLayout(layout)
        return card
    
    def create_rate_gauge(self, vacancy_rate):
        """Î∂ÑÏñëÎ•† Í≤åÏù¥ÏßÄ ÏÉùÏÑ±"""
        frame = QFrame()
        frame.setFixedHeight(80)
        
        layout = QVBoxLayout()
        layout.setAlignment(Qt.AlignCenter)
        
        # Í≤åÏù¥ÏßÄ Î∞î
        gauge_frame = QFrame()
        gauge_frame.setFixedSize(400, 20)
        gauge_frame.setStyleSheet("""
            QFrame {
                background-color: #ecf0f1;
                border-radius: 10px;
                border: 1px solid #d5dbdb;
            }
        """)
        
        # Í≤åÏù¥ÏßÄ ÎÇ¥Î∂Ä
        gauge_fill = QFrame(gauge_frame)
        fill_width = int(400 * (vacancy_rate / 100))
        gauge_fill.setGeometry(0, 0, fill_width, 20)
        
        if vacancy_rate >= 75:
            fill_color = "#28a745"
        elif vacancy_rate >= 60:
            fill_color = "#28a745"
        elif vacancy_rate >= 45:
            fill_color = "#ffc107"
        else:
            fill_color = "#dc3545"
            
        gauge_fill.setStyleSheet(f"""
            QFrame {{
                background-color: {fill_color};
                border-radius: 10px;
            }}
        """)
        
        # Í≤åÏù¥ÏßÄ ÎùºÎ≤®
        gauge_label = QLabel(f"Î∂ÑÏñëÎ•†: {vacancy_rate:.1f}%")
        gauge_label.setFont(QFont("Malgun Gothic", 12))
        gauge_label.setStyleSheet("color: #34495e; margin-top: 10px;")
        gauge_label.setAlignment(Qt.AlignCenter)
        
        layout.addWidget(gauge_frame)
        layout.addWidget(gauge_label)
        frame.setLayout(layout)
        
        return frame
    
    def create_gauge_chart(self):
        """Î∂ÑÏñëÎ•† Í≤åÏù¥ÏßÄ Ï∞®Ìä∏"""
        card = QFrame()
        card.setStyleSheet("""
            QFrame {
                background-color: white;
                border-radius: 12px;
                border: 1px solid #b8daff;
                padding: 20px;
            }
        """)
        
        layout = QVBoxLayout()
        
        title = QLabel("üìä Î∂ÑÏñëÎ•† Í≤åÏù¥ÏßÄ")
        title.setFont(QFont("Malgun Gothic", 14, QFont.Bold))
        title.setStyleSheet("color: #2c3e50; margin-bottom: 15px;")
        
        fig = Figure(figsize=(5, 4), dpi=100)
        canvas = FigureCanvas(fig)
        ax = fig.add_subplot(111)
        
        # ÎèÑÎÑõ Ï∞®Ìä∏
        vacancy_rate = self.prediction_data['vacancy_rate']
        sizes = [vacancy_rate, 100 - vacancy_rate]
        colors = ['#007bff', '#e9ecef']
        
        wedges, texts = ax.pie(sizes, colors=colors, startangle=90, counterclock=False)
        
        # Ï§ëÏïô Ïõê
        centre_circle = plt.Circle((0,0), 0.70, fc='white')
        ax.add_artist(centre_circle)
        
        # Ï§ëÏïô ÌÖçÏä§Ìä∏
        ax.text(0, 0, f'{vacancy_rate:.1f}%', ha='center', va='center', 
                fontsize=18, fontweight='bold', color='#2c3e50')
        ax.text(0, -0.3, 'Î∂ÑÏñëÎ•†', ha='center', va='center', 
                fontsize=10, color='#7f8c8d')
        
        ax.set_title('ÏòàÏÉÅ Î∂ÑÏñëÎ•†', fontsize=12, fontweight='bold', pad=20)
        fig.tight_layout()
        
        layout.addWidget(title)
        layout.addWidget(canvas)
        card.setLayout(layout)
        
        return card
    
    def create_location_chart(self):
        """ÏúÑÏπò Î∂ÑÏÑù Ï∞®Ìä∏"""
        card = QFrame()
        card.setStyleSheet("""
            QFrame {
                background-color: white;
                border-radius: 12px;
                border: 1px solid #b8daff;
                padding: 20px;
            }
        """)
        
        layout = QVBoxLayout()
        
        title = QLabel("üìç ÏúÑÏπò Î∂ÑÏÑù")
        title.setFont(QFont("Malgun Gothic", 14, QFont.Bold))
        title.setStyleSheet("color: #2c3e50; margin-bottom: 15px;")
        
        fig = Figure(figsize=(5, 4), dpi=100)
        canvas = FigureCanvas(fig)
        ax = fig.add_subplot(111)
        
        # ÏúÑÏπò Í¥ÄÎ†® Îç∞Ïù¥ÌÑ∞
        categories = ['ÏßÄÌïòÏ≤†', 'Î≤ÑÏä§', 'Ï†ëÎ©¥ÎèÑÎ°ú']
        values = [
            10 if self.input_data['subway_nearby'] else 0,
            8 if self.input_data['bus_stop'] else 0,
            min(self.input_data['road_count'] * 2, 10)
        ]
        
        colors = ['#007bff', '#28a745', '#ffc107']
        bars = ax.bar(categories, values, color=colors, alpha=0.8)
        
        ax.set_title('ÏúÑÏπò Ï†ëÍ∑ºÏÑ± Ï†êÏàò', fontsize=12, fontweight='bold', pad=20)
        ax.set_ylabel('Ï†êÏàò (10Ï†ê ÎßåÏ†ê)', fontsize=10)
        ax.set_ylim(0, 10)
        
        # Í∞í ÌëúÏãú
        for bar, value in zip(bars, values):
            if value > 0:
                ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.2, 
                       f'{value:.0f}', ha='center', va='bottom', fontsize=10, fontweight='bold')
        
        fig.tight_layout()
        
        layout.addWidget(title)
        layout.addWidget(canvas)
        card.setLayout(layout)
        
        return card
    
    def create_convenience_chart(self):
        """Ìé∏ÏùòÏãúÏÑ§ Î∂ÑÏÑù Ï∞®Ìä∏"""
        card = QFrame()
        card.setStyleSheet("""
            QFrame {
                background-color: white;
                border-radius: 12px;
                border: 1px solid #b8daff;
                padding: 20px;
            }
        """)
        
        layout = QVBoxLayout()
        
        title = QLabel("üè• Ìé∏ÏùòÏãúÏÑ§ Î∂ÑÏÑù")
        title.setFont(QFont("Malgun Gothic", 14, QFont.Bold))
        title.setStyleSheet("color: #2c3e50; margin-bottom: 15px;")
        
        fig = Figure(figsize=(5, 4), dpi=100)
        canvas = FigureCanvas(fig)
        ax = fig.add_subplot(111)
        
        # Ìé∏ÏùòÏãúÏÑ§ Îç∞Ïù¥ÌÑ∞
        facilities = ['Ï¥àÎì±ÌïôÍµê', 'Ï§ëÌïôÍµê', 'Í≥†Îì±ÌïôÍµê', 'Î≥ëÏõê', 'Í≥µÏõê']
        availability = [
            self.input_data['elementary_school'],
            self.input_data['middle_school'],
            self.input_data['high_school'],
            self.input_data['hospital_nearby'],
            self.input_data['park_nearby']
        ]
        
        # ÎèÑÎÑõ Ï∞®Ìä∏
        available_count = sum(availability)
        sizes = [available_count, len(facilities) - available_count]
        colors = ['#28a745', '#e9ecef']
        labels = ['Ïù¥Ïö© Í∞ÄÎä•', 'Ïù¥Ïö© Î∂àÍ∞Ä']
        
        wedges, texts, autotexts = ax.pie(sizes, colors=colors, labels=labels, 
                                         autopct='%1.0f%%', startangle=90)
        
        # Ï§ëÏïô ÌÖçÏä§Ìä∏
        ax.text(0, 0, f'{available_count}/{len(facilities)}', ha='center', va='center', 
                fontsize=16, fontweight='bold', color='#2c3e50')
        
        ax.set_title('Ìé∏ÏùòÏãúÏÑ§ Ïù¥Ïö© ÌòÑÌô©', fontsize=12, fontweight='bold', pad=20)
        fig.tight_layout()
        
        layout.addWidget(title)
        layout.addWidget(canvas)
        card.setLayout(layout)
        
        return card
    
    def create_economic_chart(self):
        """Í≤ΩÏ†úÏßÄÌëú Î∂ÑÏÑù Ï∞®Ìä∏"""
        card = QFrame()
        card.setStyleSheet("""
            QFrame {
                background-color: white;
                border-radius: 12px;
                border: 1px solid #b8daff;
                padding: 20px;
            }
        """)
        
        layout = QVBoxLayout()
        
        title = QLabel("üí∞ Í≤ΩÏ†úÏßÄÌëú Î∂ÑÏÑù")
        title.setFont(QFont("Malgun Gothic", 14, QFont.Bold))
        title.setStyleSheet("color: #2c3e50; margin-bottom: 15px;")
        
        fig = Figure(figsize=(5, 4), dpi=100)
        canvas = FigureCanvas(fig)
        ax = fig.add_subplot(111)
        
        # Í≤ΩÏ†úÏßÄÌëú Îç∞Ïù¥ÌÑ∞
        indicators = ['Í∏àÎ¶¨', 'ÌôòÏú®']
        values = [
            self.input_data['interest_rate'],
            self.input_data['exchange_rate'] / 100  # ÌôòÏú®ÏùÑ 100ÏúºÎ°ú ÎÇòÎàÑÏñ¥ Ïä§ÏºÄÏùº Ï°∞Ï†ï
        ]
        reference = [3.0, 13.0]  # Í∏∞Ï§ÄÍ∞í
        
        x = np.arange(len(indicators))
        width = 0.35
        
        bars1 = ax.bar(x - width/2, values, width, label='ÌòÑÏû¨Í∞í', color='#007bff', alpha=0.8)
        bars2 = ax.bar(x + width/2, reference, width, label='Í∏∞Ï§ÄÍ∞í', color='#95a5a6', alpha=0.6)
        
        ax.set_title('Í≤ΩÏ†úÏßÄÌëú ÎπÑÍµê', fontsize=12, fontweight='bold', pad=20)
        ax.set_ylabel('Í∞í', fontsize=10)
        ax.set_xticks(x)
        ax.set_xticklabels(indicators)
        ax.legend()
        
        # Í∞í ÌëúÏãú
        for bar, value in zip(bars1, values):
            ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1, 
                   f'{value:.1f}', ha='center', va='bottom', fontsize=9)
        
        fig.tight_layout()
        
        layout.addWidget(title)
        layout.addWidget(canvas)
        card.setLayout(layout)
        
        return card
    
    def create_price_comparison_chart(self):
        """Í∞ÄÍ≤© ÎπÑÍµê Ï∞®Ìä∏"""
        card = QFrame()
        card.setStyleSheet("""
            QFrame {
                background-color: white;
                border-radius: 12px;
                border: 1px solid #b8daff;
                padding: 20px;
            }
        """)
        
        layout = QVBoxLayout()
        
        title = QLabel("üí∞ Í∞ÄÍ≤© ÎπÑÍµê Î∂ÑÏÑù")
        title.setFont(QFont("Malgun Gothic", 14, QFont.Bold))
        title.setStyleSheet("color: #2c3e50; margin-bottom: 15px;")
        
        fig = Figure(figsize=(10, 4), dpi=100)
        canvas = FigureCanvas(fig)
        ax = fig.add_subplot(111)
        
        # Í∞ÄÍ≤© ÎπÑÍµê Îç∞Ïù¥ÌÑ∞
        price_types = ['Î∂ÑÏñëÎã®Í∞Ä', 'Ï£ºÎ≥ÄÏãúÏÑ∏', 'ÏãúÏû•ÌèâÍ∑†']
        prices = [
            self.input_data['avg_price_per_area'],
            self.input_data['nearby_avg_price'],
            self.input_data['nearby_avg_price'] * 1.05  # Í∞ÄÏÉÅÏùò ÏãúÏû•ÌèâÍ∑†
        ]
        
        colors = ['#007bff', '#28a745', '#ffc107']
        bars = ax.bar(price_types, prices, color=colors, alpha=0.8)
        
        ax.set_title('Í∞ÄÍ≤© ÎπÑÍµê (ÎßåÏõê/Ìèâ)', fontsize=12, fontweight='bold', pad=20)
        ax.set_ylabel('Í∞ÄÍ≤© (ÎßåÏõê/Ìèâ)', fontsize=10)
        
        # Í∞í ÌëúÏãú
        for bar, price in zip(bars, prices):
            ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 20, 
                   f'{price:,.0f}', ha='center', va='bottom', fontsize=10, fontweight='bold')
        
        # Í∞ÄÍ≤© Í≤ΩÏüÅÎ†• ÌëúÏãú
        if prices[0] < prices[1]:
            competitiveness = "Í≤ΩÏüÅÎ†• ÏûàÏùå"
            comp_color = "green"
        elif prices[0] == prices[1]:
            competitiveness = "Ï†ÅÏ†ï ÏàòÏ§Ä"
            comp_color = "orange"
        else:
            competitiveness = "ÎÜíÏùÄ Í∞ÄÍ≤©"
            comp_color = "red"
        
        ax.text(0.5, 0.95, f"Í∞ÄÍ≤© Í≤ΩÏüÅÎ†•: {competitiveness}", 
                transform=ax.transAxes, ha='center', va='top',
                fontsize=12, fontweight='bold', color=comp_color)
        
        fig.tight_layout()
        
        layout.addWidget(title)
        layout.addWidget(canvas)
        card.setLayout(layout)
        
        return card
    
    def create_analysis_card(self):
        """ÏÉÅÏÑ∏ Î∂ÑÏÑù Ïπ¥Îìú"""
        card = QFrame()
        card.setStyleSheet("""
            QFrame {
                background-color: white;
                border-radius: 12px;
                border: 1px solid #b8daff;
                padding: 25px;
            }
        """)
        
        layout = QVBoxLayout()
        layout.setSpacing(15)
        
        # Ï†úÎ™©
        title = QLabel("üîç ÏÉÅÏÑ∏ Î∂ÑÏÑù Í≤∞Í≥º")
        title.setFont(QFont("Malgun Gothic", 16, QFont.Bold))
        title.setStyleSheet("color: #2c3e50; margin-bottom: 10px;")
        
        # Î∂ÑÏÑù ÎÇ¥Ïö©ÏùÑ Í∑∏Î¶¨ÎìúÎ°ú Î∞∞Ïπò
        grid_layout = QGridLayout()
        grid_layout.setSpacing(20)
        
        # ÏúÑÏπò Í∞ïÏ†ê Î∂ÑÏÑù
        location_strengths = []
        if self.input_data['subway_nearby']:
            location_strengths.append("ÏßÄÌïòÏ≤† Ïó≠ÏÑ∏Í∂å (500m Ïù¥ÎÇ¥)")
        if self.input_data['bus_stop']:
            location_strengths.append("Î≤ÑÏä§ Ï†ïÎ•òÏû• Ï†ëÍ∑º Ïö©Ïù¥")
        if self.input_data['road_count'] >= 2:
            location_strengths.append(f"ÏñëÌò∏Ìïú ÎèÑÎ°ú Ï†ëÍ∑ºÏÑ± ({self.input_data['road_count']}Í∞ú Ï†ëÎ©¥)")
        
        if not location_strengths:
            location_strengths.append("Í∏∞Î≥∏Ï†ÅÏù∏ Ï†ëÍ∑ºÏÑ± ÌôïÎ≥¥")
        
        location_group = self.create_info_group("üìç ÏúÑÏπò Í∞ïÏ†ê", location_strengths)
        
        # Ìé∏ÏùòÏãúÏÑ§ Î∂ÑÏÑù
        convenience_items = []
        if self.input_data['elementary_school']:
            convenience_items.append("Ï¥àÎì±ÌïôÍµê Í∑ºÏ≤ò")
        if self.input_data['middle_school']:
            convenience_items.append("Ï§ëÌïôÍµê Í∑ºÏ≤ò")
        if self.input_data['high_school']:
            convenience_items.append("Í≥†Îì±ÌïôÍµê Í∑ºÏ≤ò")
        if self.input_data['hospital_nearby']:
            convenience_items.append("Î≥ëÏõê Ïù¥Ïö© Í∞ÄÎä•")
        if self.input_data['park_nearby']:
            convenience_items.append("Í≥µÏõê Î∞è ÎÖπÏßÄ Ï†ëÍ∑º")
        if self.input_data['facilities_count'] > 5:
            convenience_items.append(f"ÌíçÎ∂ÄÌïú Î∂ÄÎåÄÏãúÏÑ§ ({self.input_data['facilities_count']}Í∞ú)")
        
        if not convenience_items:
            convenience_items.append("Í∏∞Î≥∏Ï†ÅÏù∏ Ìé∏ÏùòÏãúÏÑ§ ÌôïÎ≥¥")
        
        convenience_group = self.create_info_group("üè• Ìé∏ÏùòÏãúÏÑ§", convenience_items)
        
        # Ìà¨Ïûê Í∂åÍ≥†ÏÇ¨Ìï≠
        vacancy_rate = self.prediction_data['vacancy_rate']
        recommendations = []
        
        if vacancy_rate >= 75:
            recommendations.append("Îß§Ïö∞ ÏïàÏ†ïÏ†ÅÏù∏ Î∂ÑÏñëÎ•† ÏòàÏÉÅ")
            recommendations.append("Ï°∞Í∏∞ Î∂ÑÏñë ÏôÑÎ£å Í∞ÄÎä•ÏÑ± ÎÜíÏùå")
            recommendations.append("Ìà¨Ïûê ÏàòÏùµÏÑ± Ïö∞Ïàò")
        elif vacancy_rate >= 60:
            recommendations.append("ÏïàÏ†ïÏ†ÅÏù∏ Î∂ÑÏñëÎ•† ÏòàÏÉÅ")
            recommendations.append("ÎßàÏºÄÌåÖ Í∞ïÌôîÎ°ú Î∂ÑÏñëÎ•† Ìñ•ÏÉÅ Í∞ÄÎä•")
            recommendations.append("Ìà¨Ïûê ÏúÑÌóòÎèÑ ÎÇÆÏùå")
        elif vacancy_rate >= 45:
            recommendations.append("Î∂ÑÏñë Ï†ÑÎûµ ÏàòÏ†ï ÌïÑÏöî")
            recommendations.append("Í∞ÄÍ≤© Ï°∞Ï†ï Í≤ÄÌÜ† Í∂åÏû•")
            recommendations.append("Ïã†Ï§ëÌïú Ìà¨Ïûê Í≤∞Ï†ï ÌïÑÏöî")
        else:
            recommendations.append("Î∂ÑÏñë ÏúÑÌóò ÎÜíÏùå")
            recommendations.append("Í∑ºÎ≥∏Ï†ÅÏù∏ Ï°∞Í±¥ Í∞úÏÑ† ÌïÑÏöî")
            recommendations.append("Ìà¨Ïûê Ïû¨Í≤ÄÌÜ† Í∂åÏû•")
        
        # Í≤ΩÏ†ú ÌôòÍ≤Ω Î∂ÑÏÑù
        economic_analysis = []
        if self.input_data['interest_rate'] < 3.0:
            economic_analysis.append("Ï†ÄÍ∏àÎ¶¨ ÌôòÍ≤ΩÏúºÎ°ú Î∂ÑÏñëÏóê Ïú†Î¶¨")
        elif self.input_data['interest_rate'] > 5.0:
            economic_analysis.append("Í≥†Í∏àÎ¶¨ ÌôòÍ≤ΩÏúºÎ°ú Î∂ÑÏñë Î∂ÄÎã¥ Ï¶ùÍ∞Ä")
        else:
            economic_analysis.append("Ï†ÅÏ†ï ÏàòÏ§ÄÏùò Í∏àÎ¶¨ ÌôòÍ≤Ω")
        
        if self.input_data['exchange_rate'] > 1400:
            economic_analysis.append("ÏõêÌôî ÏïΩÏÑ∏Î°ú Ìï¥Ïô∏ Ìà¨Ïûê ÎåÄÎπÑ Í≤ΩÏüÅÎ†• ÏûàÏùå")
        elif self.input_data['exchange_rate'] < 1200:
            economic_analysis.append("ÏõêÌôî Í∞ïÏÑ∏Î°ú Ìï¥Ïô∏ Ìà¨Ïûê ÏÑ†Ìò∏ Í∞ÄÎä•")
        else:
            economic_analysis.append("ÏïàÏ†ïÏ†ÅÏù∏ ÌôòÏú® ÌôòÍ≤Ω")
        
        recommendation_group = self.create_info_group("üí° Ìà¨Ïûê Í∂åÍ≥†", recommendations)
        economic_group = self.create_info_group("üìä Í≤ΩÏ†ú ÌôòÍ≤Ω", economic_analysis)
        
        grid_layout.addWidget(location_group, 0, 0)
        grid_layout.addWidget(convenience_group, 0, 1)
        grid_layout.addWidget(recommendation_group, 1, 0)
        grid_layout.addWidget(economic_group, 1, 1)
        
        layout.addWidget(title)
        layout.addLayout(grid_layout)
        card.setLayout(layout)
        
        return card
    
    def create_info_group(self, title, items):
        """Ï†ïÎ≥¥ Í∑∏Î£π ÏÉùÏÑ±"""
        group = QGroupBox(title)
        group.setFont(QFont("Malgun Gothic", 12, QFont.Bold))
        group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 1px solid #b8daff;
                border-radius: 8px;
                margin-top: 12px;
                padding-top: 12px;
                background-color: #f8f9ff;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 15px;
                padding: 0 8px 0 8px;
                color: #2c3e50;
                background-color: #f8f9ff;
            }
        """)
        
        layout = QVBoxLayout()
        layout.setSpacing(8)
        
        for item in items:
            label = QLabel(f"‚Ä¢ {item}")
            label.setFont(QFont("Malgun Gothic", 10))
            label.setStyleSheet("color: #34495e; padding: 2px 0;")
            label.setWordWrap(True)
            layout.addWidget(label)
        
        group.setLayout(layout)
        return group
    
    def center_window(self):
        """Ï∞ΩÏùÑ ÌôîÎ©¥ Ï§ëÏïôÏóê Î∞∞Ïπò"""
        screen = QApplication.desktop().screenGeometry()
        window = self.geometry()
        x = (screen.width() - window.width()) // 2
        y = (screen.height() - window.height()) // 2
        self.move(x, y)


if __name__ == "__main__":
    # ÌÖåÏä§Ìä∏Ïö©
    app = QApplication(sys.argv)
    
    # ÏÉòÌîå Îç∞Ïù¥ÌÑ∞
    sample_prediction = {
        'vacancy_rate': 78.5,
        'grade': 'Ïö∞Ïàò',
        'status': 'Îß§Ïö∞ ÏïàÏ†ï'
    }
    
    sample_input = {
        'district': 'Í∞ïÎÇ®Íµ¨',
        'subway_nearby': True,
        'bus_stop': True,
        'road_count': 3,
        'facilities_count': 8,
        'park_nearby': True,
        'avg_area': 84.5,
        'avg_price_per_area': 4200,
        'elementary_school': True,
        'middle_school': True,
        'high_school': False,
        'hospital_nearby': True,
        'interest_rate': 3.5,
        'exchange_rate': 1320,
        'nearby_avg_price': 4500
    }
    
    window = VacancyResultWindow(sample_prediction, sample_input, "ÎûòÎØ∏Ïïà Í∞ïÎÇ®")
    window.show()
    
    sys.exit(app.exec_())